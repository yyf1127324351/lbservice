<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lb.lbservice.dao.JobRecommendMapper" >


    <insert id="insertJobRecommend">
      INSERT INTO job_recommend_info (
        job_id,
        job_name,
        referee_name,
        referee_phone,
        referee_mail,
        recommended_name,
        recommended_phone,
        recommended_mail,
        status,
        valid,
        create_time
      ) VALUES (
        #{jobId},
        #{jobName},
        #{refereeName},
        #{refereePhone},
        #{refereeMail},
        #{recommendedName},
        #{recommendedPhone},
        #{recommendedMail},
        #{status},
        #{valid},
        #{createTime}
      );





    </insert>
  <select id="queryPositionIdByJobId" resultType="long" parameterType="long">
    select j.position_id from job_recommend_info r left join job  j on r.job_id=j.id
     where r.id=#{id}
  </select>
    <select id="getRecommendDetail" resultType="com.lb.lbservice.model.RecommendDetailModel">
      SELECT
        jri.id AS jobRecommendInfoId,
        jri.referee_name AS refereeName,
        jri.recommended_name AS recommendedName,
        j.id AS jobId,
        j.job_name AS jobName,
        j.department_name AS departmentName,
        job_duty AS jobDuty,
        job_requirement AS jobRequirement,
        j.job_city AS jobCity
      FROM job_recommend_info jri
      LEFT JOIN job j ON jri.job_id = j.id
      WHERE jri.id = #{jobRecommendInfoId}


    </select>

    <update id="updateJobRecommendStatus" parameterType="map">
    update job_recommend_info set status=#{status} where id in (#{id});
  </update>

  <select id="queryRecommendAndInfo" resultType="com.lb.lbservice.dto.JobRecommendAndInfo">
    select
r.id,
r.job_id jobId,
r.job_name jobName,
r.referee_name refereeName,
r.referee_phone refereePhone,
r.referee_mail refereeMail,
r.recommended_name recommendedName,
r.recommended_phone recommendedPhone,
r.recommended_mail recommendedMail,
r.`status` ,
r.valid,
s.`name`,
s.mobile,
s.email,
b.position_id job,
s.note,
s.sex,
s.age,
s.college,
s.education,
s.education_name educationName,
s.before_company beforeCompany,
s.before_job beforeJob,
s.office_area officeArea,
s.office_area_name officeAreaName,
s.xuanArea,
s.work_type workType,
s.work_type_name workTypeName,
s.send_offer sendOffer,
s.applicant_stage applicantStage,
s.applicant_status applicantStatus,
s.salary_range salaryRange,
s.salary_range_name salaryRangeName,
s.working_years workingYears,
s.working_years_name workingYearsName,
s.applicant_channel applicantChannel,
s.graduates,
s.student,
s.league,
s.intern,
s.scholarship,
s.profession,
s.business,
s.jobStatus,
s.birthDate,
s.marrayStatus,
s.politicalStatus,
s.account,
s.reportTime,
s.functions,
s.beforeBusiness,
s.address,
s.score,
s.currentwage,
s.hopewage,
s.recommenduser,
s.work_skill workSkill,
s.project_skill projectSkill,
s.education_skill educationSkill,
s.other_skill otherSkill,
s.system_from systemFrom,
s.uuid,
s.native,
s.nation,
s.pid_type pidType,
s.pid,
s.account_province accountProvince,
s.account_nature accountNature,
s.isEntrance_examination isEntranceExamination,
s.degree,
s.qq,
s.fistForeign_language fistForeignLanguage,
s.foreign_language_level foreignLanguageLevel,
s.recommender,
s.isDispute,
s.isLegal_person isLegalPerson,
s.isSideline,
s.achievement,
s.hobby,
s.evalution,
s.percentage,
s.applicant_type applicantType,
s.is_relative isRelative,
s.relative_name relativeName,
s.signatureTime,
s.signature,
s.version,
s.fileurl,
s.filename
     from job_recommend_info r left join applicant_msg s on r.id=s.apply_id
     left join job b on r.job_id=b.id
   where r.`status`=1 limit 20;
  </select>


  <update id="updateJobRecommend">
    <foreach collection="list" item="item" index="index" open="" close="" separator=";">
      UPDATE job_recommend_info
      <set>
        status = ${item.status}
      </set>
      where id = ${item.id}
    </foreach>
  </update>
</mapper>